#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

int tree[MAX_SIZE];
int size = 0;

// Function prototypes
void insert(int value);
bool search(int value);
void delete(int value);
void inOrderTraversal(int index);
void preOrderTraversal(int index);
void postOrderTraversal(int index);

int main() {
int choice, value;

do {
    printf("Binary Tree Operations:\n");
    printf("1. Insert\n");
    printf("2. Search\n");
    printf("3. Delete\n");
    printf("4. In-Order Traversal\n");
    printf("5. Pre-Order Traversal\n");
    printf("6. Post-Order Traversal\n");
    printf("7. Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch(choice) {
        case 1:
            printf("Enter the value to insert: ");
            scanf("%d", &value);
            insert(value);
            break;
        case 2:
            printf("Enter the value to search: ");
            scanf("%d", &value);
            if (search(value))
                printf("Value %d found in the binary tree.\n", value);
            else
                printf("Value %d not found in the binary tree.\n", value);
            break;
        case 3:
            printf("Enter the value to delete: ");
            scanf("%d", &value);
            delete(value);
            break;
        case 4:
            printf("In-Order Traversal: ");
            inOrderTraversal(0);
            printf("\n");
            break;
        case 5:
            printf("Pre-Order Traversal: ");
            preOrderTraversal(0);
            printf("\n");
            break;
        case 6:
            printf("Post-Order Traversal: ");
            postOrderTraversal(0);
            printf("\n");
            break;
        case 7:
            printf("Exiting...\n");
            break;
        default:
            printf("Invalid choice. Please try again.\n");
            break;
    }

} while (choice != 7);

return 0;
}

// Insert a value into the binary tree
void insert(int value) {
if (size >= MAX_SIZE) {
printf("Binary tree is full. Insertion failed.\n");
return;
}

tree[size++] = value;
printf("Value %d inserted successfully.\n", value);
}

// Search for a value in the binary tree
bool search(int value) {
for (int i = 0; i < size; i++) {
if (tree[i] == value)
return true;
}

return false;
}

// Delete a value from the binary tree
void delete(int value) {
int i;
for (i = 0; i < size; i++) {
if (tree[i] == value)
break;
}

if (i == size) {
    printf("Value %d not found in the binary tree. Deletion failed.\n", value);
    return;
}

for (int j = i; j < size - 1; j++)
    tree[j] = tree[j+1];

size--;
printf("Value %d deleted successfully.\n", value);
}

// In-order traversal of the binary tree
void inOrderTraversal(int index) {
if (index >= size)
return;

inOrderTraversal(2 * index + 1);
printf("%d ", tree[index]);
inOrderTraversal(2 * index + 2);
}

// Pre-order traversal of the binary tree
void preOrderTraversal(int index) {
if (index >= size)
return;

printf("%d ", tree[index]);
preOrderTraversal(2 * index + 1);
preOrderTraversal(2 * index + 2);
}

// Post-order traversal of the binary tree
void postOrderTraversal(int index) {
if (index >= size)
return;

postOrderTraversal(2 * index + 1);
postOrderTraversal(2 * index + 2);
printf("%d ", tree[index]);
}
